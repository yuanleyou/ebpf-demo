/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __XDP_BPF_SKEL_H__
#define __XDP_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct xdp_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *rodata;
	} maps;
	struct {
		struct bpf_program *xdp_prog_simple;
	} progs;
	struct {
		struct bpf_link *xdp_prog_simple;
	} links;
	struct xdp_bpf__rodata {
	} *rodata;

#ifdef __cplusplus
	static inline struct xdp_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct xdp_bpf *open_and_load();
	static inline int load(struct xdp_bpf *skel);
	static inline int attach(struct xdp_bpf *skel);
	static inline void detach(struct xdp_bpf *skel);
	static inline void destroy(struct xdp_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
xdp_bpf__destroy(struct xdp_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
xdp_bpf__create_skeleton(struct xdp_bpf *obj);

static inline struct xdp_bpf *
xdp_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct xdp_bpf *obj;
	int err;

	obj = (struct xdp_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = xdp_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	xdp_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct xdp_bpf *
xdp_bpf__open(void)
{
	return xdp_bpf__open_opts(NULL);
}

static inline int
xdp_bpf__load(struct xdp_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct xdp_bpf *
xdp_bpf__open_and_load(void)
{
	struct xdp_bpf *obj;
	int err;

	obj = xdp_bpf__open();
	if (!obj)
		return NULL;
	err = xdp_bpf__load(obj);
	if (err) {
		xdp_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
xdp_bpf__attach(struct xdp_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
xdp_bpf__detach(struct xdp_bpf *obj)
{
	return bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *xdp_bpf__elf_bytes(size_t *sz);

static inline int
xdp_bpf__create_skeleton(struct xdp_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "xdp_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "xdp_bpf.rodata";
	s->maps[0].map = &obj->maps.rodata;
	s->maps[0].mmaped = (void **)&obj->rodata;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "xdp_prog_simple";
	s->progs[0].prog = &obj->progs.xdp_prog_simple;
	s->progs[0].link = &obj->links.xdp_prog_simple;

	s->data = (void *)xdp_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *xdp_bpf__elf_bytes(size_t *sz)
{
	*sz = 5928;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xa8\x11\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x16\0\
\x01\0\x61\x12\0\0\0\0\0\0\x61\x13\x04\0\0\0\0\0\x1f\x23\0\0\0\0\0\0\x18\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x10\0\0\0\x85\0\0\0\x06\0\0\0\xb7\0\0\0\
\x02\0\0\0\x95\0\0\0\0\0\0\0\x70\x61\x63\x6b\x65\x74\x20\x73\x69\x7a\x65\x3a\
\x20\x25\x64\0\x47\x50\x4c\0\x63\x6c\x61\x6e\x67\x20\x76\x65\x72\x73\x69\x6f\
\x6e\x20\x31\x30\x2e\x30\x2e\x30\x2d\x34\x75\x62\x75\x6e\x74\x75\x31\x20\0\x78\
\x64\x70\x2e\x62\x70\x66\x2e\x63\0\x2f\x68\x6f\x6d\x65\x2f\x79\x75\x61\x6e\x73\
\x68\x65\x6e\x67\x72\x6f\x6e\x67\x2f\x77\x6f\x72\x6b\x73\x70\x61\x63\x65\x2f\
\x65\x62\x70\x66\x2d\x64\x65\x6d\x6f\x2f\x65\x42\x50\x46\x2d\x43\x2f\x78\x64\
\x70\0\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x63\x68\x61\x72\0\x5f\x5f\x41\x52\x52\x41\
\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x5f\x6c\x69\x63\x65\x6e\
\x73\x65\0\x62\x70\x66\x5f\x74\x72\x61\x63\x65\x5f\x70\x72\x69\x6e\x74\x6b\0\
\x6c\x6f\x6e\x67\x20\x69\x6e\x74\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\
\x74\0\x5f\x5f\x75\x33\x32\0\x58\x44\x50\x5f\x41\x42\x4f\x52\x54\x45\x44\0\x58\
\x44\x50\x5f\x44\x52\x4f\x50\0\x58\x44\x50\x5f\x50\x41\x53\x53\0\x58\x44\x50\
\x5f\x54\x58\0\x58\x44\x50\x5f\x52\x45\x44\x49\x52\x45\x43\x54\0\x78\x64\x70\
\x5f\x61\x63\x74\x69\x6f\x6e\0\x78\x64\x70\x5f\x70\x72\x6f\x67\x5f\x73\x69\x6d\
\x70\x6c\x65\0\x69\x6e\x74\0\x63\x74\x78\0\x64\x61\x74\x61\0\x64\x61\x74\x61\
\x5f\x65\x6e\x64\0\x64\x61\x74\x61\x5f\x6d\x65\x74\x61\0\x69\x6e\x67\x72\x65\
\x73\x73\x5f\x69\x66\x69\x6e\x64\x65\x78\0\x72\x78\x5f\x71\x75\x65\x75\x65\x5f\
\x69\x6e\x64\x65\x78\0\x65\x67\x72\x65\x73\x73\x5f\x69\x66\x69\x6e\x64\x65\x78\
\0\x78\x64\x70\x5f\x6d\x64\0\x70\x6b\x74\x5f\x73\x7a\0\0\0\0\0\0\0\0\0\x28\0\0\
\0\0\0\0\0\x01\0\x51\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x30\0\0\
\0\0\0\0\0\x01\0\x52\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x18\0\0\
\0\0\0\0\0\x01\0\x53\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x38\0\0\
\0\0\0\0\0\x01\0\x53\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x11\x01\x25\x0e\x13\
\x05\x03\x0e\x10\x17\x1b\x0e\x11\x01\x12\x06\0\0\x02\x2e\x01\x11\x01\x12\x06\
\x40\x18\x97\x42\x19\x03\x0e\x3a\x0b\x3b\x0b\x27\x19\x49\x13\x3f\x19\0\0\x03\
\x34\0\x03\x0e\x49\x13\x3a\x0b\x3b\x0b\x02\x18\0\0\x04\x05\0\x02\x17\x03\x0e\
\x3a\x0b\x3b\x0b\x49\x13\0\0\x05\x34\0\x02\x17\x03\x0e\x3a\x0b\x3b\x0b\x49\x13\
\0\0\x06\x01\x01\x49\x13\0\0\x07\x21\0\x49\x13\x37\x0b\0\0\x08\x26\0\x49\x13\0\
\0\x09\x24\0\x03\x0e\x3e\x0b\x0b\x0b\0\0\x0a\x24\0\x03\x0e\x0b\x0b\x3e\x0b\0\0\
\x0b\x34\0\x03\x0e\x49\x13\x3f\x19\x3a\x0b\x3b\x0b\x02\x18\0\0\x0c\x34\0\x03\
\x0e\x49\x13\x3a\x0b\x3b\x0b\0\0\x0d\x0f\0\x49\x13\0\0\x0e\x15\x01\x49\x13\x27\
\x19\0\0\x0f\x05\0\x49\x13\0\0\x10\x18\0\0\0\x11\x16\0\x49\x13\x03\x0e\x3a\x0b\
\x3b\x0b\0\0\x12\x04\x01\x49\x13\x03\x0e\x0b\x0b\x3a\x0b\x3b\x05\0\0\x13\x28\0\
\x03\x0e\x1c\x0f\0\0\x14\x0f\0\0\0\x15\x13\x01\x03\x0e\x0b\x0b\x3a\x0b\x3b\x05\
\0\0\x16\x0d\0\x03\x0e\x49\x13\x3a\x0b\x3b\x05\x38\x0b\0\0\0\xa2\x01\0\0\x04\0\
\0\0\0\0\x08\x01\0\0\0\0\x0c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x48\0\0\
\0\x02\0\0\0\0\0\0\0\0\x48\0\0\0\x01\x5a\0\0\0\0\x01\x06\x41\x01\0\0\x03\0\0\0\
\0\x95\0\0\0\x01\x0c\x09\x03\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\x01\x06\x48\
\x01\0\0\x05\x23\0\0\0\0\0\0\0\x01\x08\x40\x01\0\0\x05\x46\0\0\0\0\0\0\0\x01\
\x09\x40\x01\0\0\x05\x69\0\0\0\0\0\0\0\x01\x0a\x41\x01\0\0\0\x06\xa1\0\0\0\x07\
\xad\0\0\0\x10\0\x08\xa6\0\0\0\x09\0\0\0\0\x06\x01\x0a\0\0\0\0\x08\x07\x0b\0\0\
\0\0\xc9\0\0\0\x01\x10\x09\x03\0\0\0\0\0\0\0\0\x06\xa6\0\0\0\x07\xad\0\0\0\x04\
\0\x0c\0\0\0\0\xe0\0\0\0\x03\xb0\x0d\xe5\0\0\0\x0e\xf6\0\0\0\x0f\xfd\0\0\0\x0f\
\x02\x01\0\0\x10\0\x09\0\0\0\0\x05\x08\x0d\xa1\0\0\0\x11\x0d\x01\0\0\0\0\0\0\
\x02\x1b\x09\0\0\0\0\x07\x04\x12\x0d\x01\0\0\0\0\0\0\x04\x04\xaa\x17\x13\0\0\0\
\0\0\x13\0\0\0\0\x01\x13\0\0\0\0\x02\x13\0\0\0\0\x03\x13\0\0\0\0\x04\0\x14\x09\
\0\0\0\0\x05\x04\x0d\x4d\x01\0\0\x15\0\0\0\0\x18\x04\xb5\x17\x16\0\0\0\0\x02\
\x01\0\0\x04\xb6\x17\0\x16\0\0\0\0\x02\x01\0\0\x04\xb7\x17\x04\x16\0\0\0\0\x02\
\x01\0\0\x04\xb8\x17\x08\x16\0\0\0\0\x02\x01\0\0\x04\xba\x17\x0c\x16\0\0\0\0\
\x02\x01\0\0\x04\xbb\x17\x10\x16\0\0\0\0\x02\x01\0\0\x04\xbd\x17\x14\0\0\x9f\
\xeb\x01\0\x18\0\0\0\0\0\0\0\x58\x01\0\0\x58\x01\0\0\xb3\x01\0\0\0\0\0\0\0\0\0\
\x02\x02\0\0\0\x01\0\0\0\x06\0\0\x04\x18\0\0\0\x08\0\0\0\x03\0\0\0\0\0\0\0\x0d\
\0\0\0\x03\0\0\0\x20\0\0\0\x16\0\0\0\x03\0\0\0\x40\0\0\0\x20\0\0\0\x03\0\0\0\
\x60\0\0\0\x30\0\0\0\x03\0\0\0\x80\0\0\0\x3f\0\0\0\x03\0\0\0\xa0\0\0\0\x4e\0\0\
\0\0\0\0\x08\x04\0\0\0\x54\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\x01\0\0\
\x0d\x06\0\0\0\x61\0\0\0\x01\0\0\0\x65\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\
\x69\0\0\0\x01\0\0\x0c\x05\0\0\0\0\0\0\0\0\0\0\x0a\x09\0\0\0\x69\x01\0\0\0\0\0\
\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x08\0\0\0\x0b\0\0\0\x10\0\
\0\0\x6e\x01\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\x82\x01\0\0\0\0\0\x0e\x0a\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x09\0\0\0\x0b\0\0\0\x04\0\0\0\x9a\x01\0\0\0\
\0\0\x0e\x0d\0\0\0\x01\0\0\0\xa3\x01\0\0\x01\0\0\x0f\0\0\0\0\x0c\0\0\0\0\0\0\0\
\x10\0\0\0\xab\x01\0\0\x01\0\0\x0f\0\0\0\0\x0e\0\0\0\0\0\0\0\x04\0\0\0\0\x78\
\x64\x70\x5f\x6d\x64\0\x64\x61\x74\x61\0\x64\x61\x74\x61\x5f\x65\x6e\x64\0\x64\
\x61\x74\x61\x5f\x6d\x65\x74\x61\0\x69\x6e\x67\x72\x65\x73\x73\x5f\x69\x66\x69\
\x6e\x64\x65\x78\0\x72\x78\x5f\x71\x75\x65\x75\x65\x5f\x69\x6e\x64\x65\x78\0\
\x65\x67\x72\x65\x73\x73\x5f\x69\x66\x69\x6e\x64\x65\x78\0\x5f\x5f\x75\x33\x32\
\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x63\x74\x78\0\x69\x6e\x74\
\0\x78\x64\x70\x5f\x70\x72\x6f\x67\x5f\x73\x69\x6d\x70\x6c\x65\0\x78\x64\x70\0\
\x2f\x68\x6f\x6d\x65\x2f\x79\x75\x61\x6e\x73\x68\x65\x6e\x67\x72\x6f\x6e\x67\
\x2f\x77\x6f\x72\x6b\x73\x70\x61\x63\x65\x2f\x65\x62\x70\x66\x2d\x64\x65\x6d\
\x6f\x2f\x65\x42\x50\x46\x2d\x43\x2f\x78\x64\x70\x2f\x78\x64\x70\x2e\x62\x70\
\x66\x2e\x63\0\x09\x76\x6f\x69\x64\x20\x2a\x64\x61\x74\x61\x20\x3d\x20\x28\x76\
\x6f\x69\x64\x20\x2a\x29\x28\x6c\x6f\x6e\x67\x29\x63\x74\x78\x2d\x3e\x64\x61\
\x74\x61\x3b\0\x09\x76\x6f\x69\x64\x20\x2a\x64\x61\x74\x61\x5f\x65\x6e\x64\x20\
\x3d\x20\x28\x76\x6f\x69\x64\x20\x2a\x29\x28\x6c\x6f\x6e\x67\x29\x63\x74\x78\
\x2d\x3e\x64\x61\x74\x61\x5f\x65\x6e\x64\x3b\0\x09\x69\x6e\x74\x20\x70\x6b\x74\
\x5f\x73\x7a\x20\x3d\x20\x64\x61\x74\x61\x5f\x65\x6e\x64\x20\x2d\x20\x64\x61\
\x74\x61\x3b\0\x09\x62\x70\x66\x5f\x70\x72\x69\x6e\x74\x6b\x28\x22\x70\x61\x63\
\x6b\x65\x74\x20\x73\x69\x7a\x65\x3a\x20\x25\x64\x22\x2c\x20\x70\x6b\x74\x5f\
\x73\x7a\x29\x3b\0\x09\x72\x65\x74\x75\x72\x6e\x20\x58\x44\x50\x5f\x50\x41\x53\
\x53\x3b\0\x63\x68\x61\x72\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\
\x5f\x54\x59\x50\x45\x5f\x5f\0\x78\x64\x70\x5f\x70\x72\x6f\x67\x5f\x73\x69\x6d\
\x70\x6c\x65\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\
\0\x2e\x72\x6f\x64\x61\x74\x61\0\x6c\x69\x63\x65\x6e\x73\x65\0\x9f\xeb\x01\0\
\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\x5c\0\0\0\x70\0\0\0\0\0\0\0\x08\0\0\0\
\x79\0\0\0\x01\0\0\0\0\0\0\0\x07\0\0\0\x10\0\0\0\x79\0\0\0\x05\0\0\0\0\0\0\0\
\x7d\0\0\0\xba\0\0\0\x22\x20\0\0\x08\0\0\0\x7d\0\0\0\xe1\0\0\0\x26\x24\0\0\x10\
\0\0\0\x7d\0\0\0\x10\x01\0\0\x18\x28\0\0\x18\0\0\0\x7d\0\0\0\x2f\x01\0\0\x02\
\x30\0\0\x38\0\0\0\x7d\0\0\0\x57\x01\0\0\x02\x34\0\0\0\0\0\x0c\0\0\0\xff\xff\
\xff\xff\x04\0\x08\0\x08\x7c\x0b\0\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x48\0\0\0\
\0\0\0\0\xc5\0\0\0\x04\0\xa0\0\0\0\x08\x01\x01\xfb\x0e\x0d\0\x01\x01\x01\x01\0\
\0\0\x01\0\0\x01\x2f\x75\x73\x72\x2f\x69\x6e\x63\x6c\x75\x64\x65\x2f\x61\x73\
\x6d\x2d\x67\x65\x6e\x65\x72\x69\x63\0\x2e\x2e\x2f\x6c\x69\x62\x62\x70\x66\x2f\
\x75\x73\x72\x2f\x69\x6e\x63\x6c\x75\x64\x65\x2f\x62\x70\x66\0\x2e\x2e\x2f\x2e\
\x2e\x2f\x6c\x69\x62\x62\x70\x66\x2f\x69\x6e\x63\x6c\x75\x64\x65\x2f\x75\x61\
\x70\x69\x2f\x6c\x69\x6e\x75\x78\0\0\x78\x64\x70\x2e\x62\x70\x66\x2e\x63\0\0\0\
\0\x69\x6e\x74\x2d\x6c\x6c\x36\x34\x2e\x68\0\x01\0\0\x62\x70\x66\x5f\x68\x65\
\x6c\x70\x65\x72\x5f\x64\x65\x66\x73\x2e\x68\0\x02\0\0\x62\x70\x66\x2e\x68\0\
\x03\0\0\0\0\x09\x02\0\0\0\0\0\0\0\0\x18\x05\x22\x0a\x13\x05\x26\x21\x05\x18\
\x21\x05\x02\x22\x4b\x02\x02\0\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xb0\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\x1f\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\x29\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x07\0\x5c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\x64\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\x69\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x07\0\x7d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\x86\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\x97\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x07\0\xa0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\xad\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\xb3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x07\0\xbf\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\xc8\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\xd1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x07\0\xd8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\xe5\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\xf0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x07\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\x04\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\x08\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x07\0\x0d\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\x16\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\x20\x01\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x07\0\x30\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\
\0\x3f\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\x4e\x01\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\x55\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x22\0\0\0\
\x01\0\x05\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x03\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x09\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x03\0\x12\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6b\0\0\0\x11\0\x06\0\0\0\0\0\0\
\0\0\0\x04\0\0\0\0\0\0\0\x95\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x48\0\0\0\0\0\0\
\0\x18\0\0\0\0\0\0\0\x01\0\0\0\x20\0\0\0\x06\0\0\0\0\0\0\0\x0a\0\0\0\x22\0\0\0\
\x0c\0\0\0\0\0\0\0\x0a\0\0\0\x02\0\0\0\x12\0\0\0\0\0\0\0\x0a\0\0\0\x03\0\0\0\
\x16\0\0\0\0\0\0\0\x0a\0\0\0\x24\0\0\0\x1a\0\0\0\0\0\0\0\x0a\0\0\0\x04\0\0\0\
\x1e\0\0\0\0\0\0\0\x01\0\0\0\x1f\0\0\0\x2b\0\0\0\0\0\0\0\x01\0\0\0\x1f\0\0\0\
\x39\0\0\0\0\0\0\0\x0a\0\0\0\x13\0\0\0\x44\0\0\0\0\0\0\0\x0a\0\0\0\x05\0\0\0\
\x50\0\0\0\0\0\0\0\x01\0\0\0\x20\0\0\0\x59\0\0\0\0\0\0\0\x0a\0\0\0\x21\0\0\0\
\x5d\0\0\0\0\0\0\0\x0a\0\0\0\x15\0\0\0\x68\0\0\0\0\0\0\0\x0a\0\0\0\x21\0\0\0\
\x6c\0\0\0\0\0\0\0\x0a\0\0\0\x16\0\0\0\x77\0\0\0\0\0\0\0\x0a\0\0\0\x21\0\0\0\
\x7b\0\0\0\0\0\0\0\x0a\0\0\0\x17\0\0\0\x86\0\0\0\0\0\0\0\x0a\0\0\0\x21\0\0\0\
\x8a\0\0\0\0\0\0\0\x0a\0\0\0\x1d\0\0\0\xa7\0\0\0\0\0\0\0\x0a\0\0\0\x06\0\0\0\
\xae\0\0\0\0\0\0\0\x0a\0\0\0\x07\0\0\0\xb5\0\0\0\0\0\0\0\x0a\0\0\0\x08\0\0\0\
\xc1\0\0\0\0\0\0\0\x01\0\0\0\x25\0\0\0\xd6\0\0\0\0\0\0\0\x0a\0\0\0\x09\0\0\0\
\xf7\0\0\0\0\0\0\0\x0a\0\0\0\x0a\0\0\0\x07\x01\0\0\0\0\0\0\x0a\0\0\0\x0c\0\0\0\
\x0e\x01\0\0\0\0\0\0\x0a\0\0\0\x0b\0\0\0\x19\x01\0\0\0\0\0\0\x0a\0\0\0\x12\0\0\
\0\x22\x01\0\0\0\0\0\0\x0a\0\0\0\x0d\0\0\0\x28\x01\0\0\0\0\0\0\x0a\0\0\0\x0e\0\
\0\0\x2e\x01\0\0\0\0\0\0\x0a\0\0\0\x0f\0\0\0\x34\x01\0\0\0\0\0\0\x0a\0\0\0\x10\
\0\0\0\x3a\x01\0\0\0\0\0\0\x0a\0\0\0\x11\0\0\0\x42\x01\0\0\0\0\0\0\x0a\0\0\0\
\x14\0\0\0\x4e\x01\0\0\0\0\0\0\x0a\0\0\0\x1c\0\0\0\x57\x01\0\0\0\0\0\0\x0a\0\0\
\0\x16\0\0\0\x64\x01\0\0\0\0\0\0\x0a\0\0\0\x17\0\0\0\x71\x01\0\0\0\0\0\0\x0a\0\
\0\0\x18\0\0\0\x7e\x01\0\0\0\0\0\0\x0a\0\0\0\x19\0\0\0\x8b\x01\0\0\0\0\0\0\x0a\
\0\0\0\x1a\0\0\0\x98\x01\0\0\0\0\0\0\x0a\0\0\0\x1b\0\0\0\x50\x01\0\0\0\0\0\0\
\x0a\0\0\0\x20\0\0\0\x68\x01\0\0\0\0\0\0\0\0\0\0\x25\0\0\0\x2c\0\0\0\0\0\0\0\0\
\0\0\0\x1f\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\x1f\0\0\0\x50\0\0\0\0\0\0\0\0\0\0\0\
\x1f\0\0\0\x60\0\0\0\0\0\0\0\0\0\0\0\x1f\0\0\0\x70\0\0\0\0\0\0\0\0\0\0\0\x1f\0\
\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\x1f\0\0\0\x14\0\0\0\0\0\0\0\x0a\0\0\0\x23\0\0\0\
\x18\0\0\0\0\0\0\0\x01\0\0\0\x1f\0\0\0\xad\0\0\0\0\0\0\0\x01\0\0\0\x1f\0\0\0\
\x26\x1e\x25\0\x2e\x64\x65\x62\x75\x67\x5f\x61\x62\x62\x72\x65\x76\0\x2e\x74\
\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\x2e\x65\x78\x74\0\x78\x64\x70\
\x5f\x70\x72\x6f\x67\x5f\x73\x69\x6d\x70\x6c\x65\x2e\x5f\x5f\x5f\x5f\x66\x6d\
\x74\0\x2e\x64\x65\x62\x75\x67\x5f\x73\x74\x72\0\x2e\x72\x65\x6c\x78\x64\x70\0\
\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x69\x6e\x66\x6f\0\x2e\x6c\x6c\x76\
\x6d\x5f\x61\x64\x64\x72\x73\x69\x67\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\
\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x6c\x69\x6e\x65\0\x2e\x72\x65\x6c\x2e\
\x64\x65\x62\x75\x67\x5f\x66\x72\x61\x6d\x65\0\x78\x64\x70\x5f\x70\x72\x6f\x67\
\x5f\x73\x69\x6d\x70\x6c\x65\0\x2e\x64\x65\x62\x75\x67\x5f\x6c\x6f\x63\0\x78\
\x64\x70\x2e\x62\x70\x66\x2e\x63\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\
\x6d\x74\x61\x62\0\x2e\x72\x6f\x64\x61\x74\x61\0\x2e\x72\x65\x6c\x2e\x42\x54\
\x46\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xba\0\0\0\x03\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xcb\x10\0\0\0\0\0\0\xdb\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x01\0\0\0\x06\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x49\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x40\0\0\0\0\0\0\0\x48\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x45\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x88\x0d\0\0\0\0\
\0\0\x10\0\0\0\0\0\0\0\x15\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\
\xca\0\0\0\x01\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x88\0\0\0\0\0\0\0\x10\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6c\0\0\0\x01\0\
\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x98\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x3a\0\0\0\x01\0\0\0\x30\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x9c\0\0\0\0\0\0\0\x5c\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\xa5\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\xf8\x01\0\0\0\0\0\0\x8c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84\
\x02\0\0\0\0\0\0\x08\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x51\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8c\x03\0\0\0\0\0\
\0\xa6\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x4d\0\
\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x98\x0d\0\0\0\0\0\0\x80\x02\0\0\
\0\0\0\0\x15\0\0\0\x0a\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xd6\0\0\0\x01\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x32\x05\0\0\0\0\0\0\x23\x03\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd2\0\0\0\x09\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x18\x10\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x15\0\0\0\x0c\0\
\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x19\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x55\x08\0\0\0\0\0\0\x90\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x15\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x38\x10\0\0\0\0\0\0\x60\0\0\0\0\0\0\0\x15\0\0\0\x0e\0\0\0\x08\0\0\0\0\0\0\0\
\x10\0\0\0\0\0\0\0\x88\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe8\x08\
\0\0\0\0\0\0\x28\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x84\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x98\x10\0\0\0\0\0\0\x20\
\0\0\0\0\0\0\0\x15\0\0\0\x10\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x78\0\0\
\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\x09\0\0\0\0\0\0\xc9\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x74\0\0\0\x09\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb8\x10\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x15\0\0\0\
\x12\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x5d\0\0\0\x03\x4c\xff\x6f\0\0\0\
\x80\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x10\0\0\0\0\0\0\x03\0\0\0\0\0\0\0\x15\0\0\0\0\
\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc2\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\xe0\x09\0\0\0\0\0\0\xa8\x03\0\0\0\0\0\0\x01\0\0\0\x25\0\0\0\x08\
\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";
}

#ifdef __cplusplus
struct xdp_bpf *xdp_bpf::open(const struct bpf_object_open_opts *opts) { return xdp_bpf__open_opts(opts); }
struct xdp_bpf *xdp_bpf::open_and_load() { return xdp_bpf__open_and_load(); }
int xdp_bpf::load(struct xdp_bpf *skel) { return xdp_bpf__load(skel); }
int xdp_bpf::attach(struct xdp_bpf *skel) { return xdp_bpf__attach(skel); }
void xdp_bpf::detach(struct xdp_bpf *skel) { xdp_bpf__detach(skel); }
void xdp_bpf::destroy(struct xdp_bpf *skel) { xdp_bpf__destroy(skel); }
const void *xdp_bpf::elf_bytes(size_t *sz) { return xdp_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
xdp_bpf__assert(struct xdp_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __XDP_BPF_SKEL_H__ */
